"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var uml_relationship_type_1 = require("../../../packages/uml-relationship-type");
var uml_relationships_1 = require("../../../packages/uml-relationships");
var uml_element_common_repository_1 = require("../uml-element-common-repository");
exports.Connectable = {
    startConnecting: function (direction, id) { return function (dispatch, getState) {
        var ids = id ? (Array.isArray(id) ? id : [id]) : getState().selected;
        var directions = Array.isArray(direction) ? direction : [direction];
        if (!ids.length || (directions.length !== 1 && directions.length !== ids.length)) {
            return;
        }
        var ports = ids.map(function (element, index) { return ({
            element: element,
            direction: directions.length === 1 ? directions[0] : directions[index],
        }); });
        dispatch({
            type: "@@element/connectable/START" /* START */,
            payload: { ports: ports },
            undoable: false,
        });
    }; },
    connect: function (target, source) { return function (dispatch, getState) {
        var e_1, _a;
        var sources = source ? (Array.isArray(source) ? source : [source]) : getState().connecting;
        var targets = Array.isArray(target) ? target : [target];
        if (!targets.length || (targets.length !== 1 && targets.length !== sources.length)) {
            return;
        }
        var connections = [];
        try {
            for (var _b = tslib_1.__values(sources.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = tslib_1.__read(_c.value, 2), index = _d[0], port = _d[1];
                if (port.element === targets[index].element && port.direction === targets[index].direction) {
                    continue;
                }
                connections.push({ source: port, target: targets.length === 1 ? targets[0] : targets[index] });
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (connections.length) {
            var type = uml_relationship_type_1.DefaultUMLRelationshipType[getState().diagram.type];
            var Classifier_1 = uml_relationships_1.UMLRelationships[type];
            var relationships = connections.map(function (connection) { return new Classifier_1(connection); });
            dispatch(uml_element_common_repository_1.UMLElementCommonRepository.create(relationships));
        }
        if (!source) {
            dispatch({
                type: "@@element/connectable/END" /* END */,
                payload: { ports: sources },
                undoable: false,
            });
        }
    }; },
    endConnecting: function (port) { return function (dispatch, getState) {
        var ports = port ? (Array.isArray(port) ? port : [port]) : getState().connecting;
        if (!ports.length) {
            return;
        }
        dispatch({
            type: "@@element/connectable/END" /* END */,
            payload: { ports: ports },
            undoable: false,
        });
    }; },
};
//# sourceMappingURL=connectable-repository.js.map