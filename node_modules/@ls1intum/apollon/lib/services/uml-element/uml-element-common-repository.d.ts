import { Point } from '../../utils/geometry/point';
import { IUMLElement, UMLElement } from './uml-element';
import { UpdateAction } from './uml-element-types';
export declare const UMLElementCommonRepository: {
    /**
     * Creates new instances of `UMLElements`
     *
     * @param values - An array of new values for the instances to create.
     * @param [owner] - Specify the owner for the new elements.
     */
    create: <T extends IUMLElement>(value: T | T[], owner?: string | undefined) => import("redux-thunk").ThunkAction<void, import("../../components/store/model-state").ModelState, undefined, import("../../utils/actions/actions").Action<any>>;
    /** Read an UMLElement */
    get: (element?: IUMLElement | undefined) => UMLElement | null;
    /** Read an UMLElement by id */
    getById: (id: string) => import("redux-thunk").ThunkAction<UMLElement | null, import("../../components/store/model-state").ModelState, undefined, import("../../utils/actions/actions").Action<any>>;
    /** Update existing elements */
    update: <T_1 extends IUMLElement>(id: string | string[], values: Partial<T_1>) => UpdateAction<T_1>;
    /** Delete existing elements */
    delete: (id?: string | string[] | undefined) => import("redux-thunk").ThunkAction<void, import("../../components/store/model-state").ModelState, undefined, import("../../utils/actions/actions").Action<any>>;
    /** Composes the absolute position of an element */
    getAbsolutePosition: (id: string) => import("redux-thunk").ThunkAction<Point, import("../../components/store/model-state").ModelState, undefined, import("../../utils/actions/actions").Action<any>>;
    getChildren: (id: string) => import("redux-thunk").ThunkAction<IUMLElement[], import("../../components/store/model-state").ModelState, undefined, import("../../utils/actions/actions").Action<any>>;
};
