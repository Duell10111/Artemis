import { IBoundary } from '../../utils/geometry/boundary';
import { IPath } from '../../utils/geometry/path';
import { IUMLElement } from '../uml-element/uml-element';
import { UMLRelationship } from './uml-relationship';
import { LayoutAction } from './uml-relationship-types';
export declare const UMLRelationshipRepository: {
    startReconnecting: (endpoint: "source" | "target", id?: string | string[] | undefined) => import("redux-thunk").ThunkAction<void, import("../../components/store/model-state").ModelState, undefined, import("../../utils/actions/actions").Action<any>>;
    reconnect: (target: import("../uml-element/uml-element-port").IUMLElementPort) => import("redux-thunk").ThunkAction<void, import("../../components/store/model-state").ModelState, undefined, import("../../utils/actions/actions").Action<any>>;
    endReconnecting: (id?: string | string[] | undefined) => import("redux-thunk").ThunkAction<void, import("../../components/store/model-state").ModelState, undefined, import("../../utils/actions/actions").Action<any>>;
    get: (element?: IUMLElement | undefined) => UMLRelationship | null;
    layout: (id: string, path: IPath, bounds: IBoundary) => LayoutAction;
    flip: (id?: string | string[] | undefined) => import("redux-thunk").ThunkAction<void, import("../../components/store/model-state").ModelState, undefined, import("../../utils/actions/actions").Action<any>>;
};
