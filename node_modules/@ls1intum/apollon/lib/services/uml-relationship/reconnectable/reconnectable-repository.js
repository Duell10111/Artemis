"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var not_empty_1 = require("../../../utils/not-empty");
exports.Reconnectable = {
    startReconnecting: function (endpoint, id) { return function (dispatch, getState) {
        var ids = id ? (Array.isArray(id) ? id : [id]) : getState().selected;
        if (!ids.length) {
            return;
        }
        dispatch({
            type: "@@element/reconnectable/START" /* START */,
            payload: { ids: ids, endpoint: endpoint },
            undoable: true,
        });
    }; },
    reconnect: function (target) { return function (dispatch, getState) {
        var _a = getState(), reconnecting = _a.reconnecting, elements = _a.elements;
        var connections = Object.keys(reconnecting)
            .map(function (id) {
            var _a;
            var relationship = elements[id];
            var endpoint1 = reconnecting[id];
            var endpoint2 = endpoint1 === 'source' ? 'target' : 'source';
            var connection = (_a = {},
                _a[endpoint1] = relationship[endpoint1],
                _a[endpoint2] = tslib_1.__assign(tslib_1.__assign({}, relationship[endpoint2]), target),
                _a);
            if (connection.source.element === connection.target.element &&
                connection.source.direction === connection.target.direction) {
                return null;
            }
            return tslib_1.__assign({ id: id }, connection);
        })
            .filter(not_empty_1.notEmpty);
        if (!connections.length) {
            return;
        }
        dispatch({
            type: "@@element/reconnectable/RECONNECT" /* RECONNECT */,
            payload: { connections: connections },
            undoable: false,
        });
    }; },
    endReconnecting: function (id) { return function (dispatch, getState) {
        var ids = id ? (Array.isArray(id) ? id : [id]) : Object.keys(getState().reconnecting);
        if (!ids.length) {
            return;
        }
        dispatch({
            type: "@@element/reconnectable/END" /* END */,
            payload: { ids: ids },
            undoable: false,
        });
    }; },
};
//# sourceMappingURL=reconnectable-repository.js.map