"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var uml_relationships_1 = require("../../packages/uml-relationships");
var reconnectable_repository_1 = require("./reconnectable/reconnectable-repository");
var uml_relationship_1 = require("./uml-relationship");
var Repository = {
    get: function (element) {
        if (!element) {
            return null;
        }
        if (uml_relationship_1.UMLRelationship.isUMLRelationship(element)) {
            var Classifier = uml_relationships_1.UMLRelationships[element.type];
            return new Classifier(element);
        }
        return null;
    },
    layout: function (id, path, bounds) { return ({
        type: "@@relationship/LAYOUT" /* LAYOUT */,
        payload: { id: id, path: path, bounds: bounds },
        undoable: false,
    }); },
    flip: function (id) { return function (dispatch, getState) {
        var _a = getState(), selected = _a.selected, elements = _a.elements;
        var ids = id ? (Array.isArray(id) ? id : [id]) : selected;
        var connections = ids.map(function (r) {
            var relationship = elements[r];
            var source = { element: relationship.target.element, direction: relationship.target.direction };
            var target = { element: relationship.source.element, direction: relationship.source.direction };
            return { id: relationship.id, source: source, target: target };
        });
        dispatch({
            type: "@@element/reconnectable/RECONNECT" /* RECONNECT */,
            payload: { connections: connections },
            undoable: true,
        });
    }; },
};
exports.UMLRelationshipRepository = tslib_1.__assign(tslib_1.__assign({}, Repository), reconnectable_repository_1.Reconnectable);
//# sourceMappingURL=uml-relationship-repository.js.map