"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var styles_1 = require("../components/theme/styles");
var components_1 = require("../packages/components");
var uml_elements_1 = require("../packages/uml-elements");
var uml_relationships_1 = require("../packages/uml-relationships");
var uml_container_1 = require("../services/uml-container/uml-container");
var boundary_1 = require("../utils/geometry/boundary");
var point_1 = require("../utils/geometry/point");
var update_1 = require("../utils/update");
var svg_styles_1 = require("./svg-styles");
var includeChildren = function (elements, ids, include) {
    var e_1, _a;
    var result = new Set();
    try {
        for (var ids_1 = tslib_1.__values(ids), ids_1_1 = ids_1.next(); !ids_1_1.done; ids_1_1 = ids_1.next()) {
            var id = ids_1_1.value;
            var element = elements[id];
            if (!element)
                continue;
            var children = new Set(uml_container_1.UMLContainer.isUMLContainer(element) ? element.ownedElements : []);
            if (include.has(id)) {
                result.add(id);
                include = new Set(tslib_1.__spread(include, children));
            }
            includeChildren(elements, children, include).forEach(result.add, result);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (ids_1_1 && !ids_1_1.done && (_a = ids_1.return)) _a.call(ids_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return result;
};
var excludeChildren = function (elements, ids, exclude) {
    var e_2, _a;
    var result = new Set();
    try {
        for (var ids_2 = tslib_1.__values(ids), ids_2_1 = ids_2.next(); !ids_2_1.done; ids_2_1 = ids_2.next()) {
            var id = ids_2_1.value;
            var element = elements[id];
            if (!element)
                continue;
            var children = new Set(uml_container_1.UMLContainer.isUMLContainer(element) ? element.ownedElements : []);
            if (!exclude.has(id)) {
                result.add(id);
            }
            else {
                exclude = new Set(tslib_1.__spread(exclude, children));
            }
            excludeChildren(elements, children, exclude).forEach(result.add, result);
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (ids_2_1 && !ids_2_1.done && (_a = ids_2.return)) _a.call(ids_2);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return result;
};
var getInitialState = function (_a) {
    var model = _a.model, options = _a.options;
    var layer = {
        layer: document.createElementNS('http://www.w3.org/2000/svg', 'svg'),
        origin: function () { return new point_1.Point(); },
        snap: function (point) { return point; },
    };
    var apollonElements = model.elements;
    var apollonRelationships = model.relationships;
    var deserialize = function (apollonElement) {
        var element = new uml_elements_1.UMLElements[apollonElement.type]();
        var apollonChildren = uml_container_1.UMLContainer.isUMLContainer(element)
            ? apollonElements.filter(function (child) { return child.owner === apollonElement.id; })
            : [];
        element.deserialize(apollonElement, apollonChildren);
        var children = apollonChildren.reduce(function (acc, val) { return tslib_1.__spread(acc, deserialize(val)); }, []);
        var _a = tslib_1.__read(element.render(layer, children)), root = _a[0], updates = _a.slice(1);
        updates.map(function (x) {
            var original = apollonChildren.find(function (y) { return y.id === x.id; });
            if (!original) {
                return x;
            }
            x.bounds.x = original.bounds.x;
            x.bounds.y = original.bounds.y;
            return x;
        });
        return tslib_1.__spread([root], updates);
    };
    var elements = apollonElements
        .filter(function (element) { return !element.owner; })
        .reduce(function (acc, val) { return tslib_1.__spread(acc, deserialize(val)); }, []);
    var relationships = apollonRelationships.map(function (apollonRelationship) {
        var relationship = new uml_relationships_1.UMLRelationships[apollonRelationship.type]();
        relationship.deserialize(apollonRelationship);
        return relationship;
    });
    var elementState = tslib_1.__spread(elements, relationships).reduce(function (acc, val) {
        var _a;
        return (tslib_1.__assign(tslib_1.__assign({}, acc), (_a = {}, _a[val.id] = val, _a)));
    }, {});
    var roots = Object.values(elementState).filter(function (element) { return !element.owner; });
    var layout = new Set(Object.values(elementState).map(function (x) { return x.id; }));
    if (options && options.include) {
        layout = includeChildren(elementState, new Set(roots.map(function (element) { return element.id; })), new Set(options.include));
    }
    if (options && options.exclude) {
        layout = excludeChildren(elementState, new Set(roots.map(function (element) { return element.id; })), new Set(options.exclude));
    }
    var keepOriginalSize = (options && options.keepOriginalSize) || false;
    var bounds = boundary_1.computeBoundingBoxForElements(Object.values(elementState).filter(function (element) { return keepOriginalSize || layout.has(element.id); }));
    if (options) {
        var margin = getMargin(options.margin);
        bounds.x -= margin.left;
        bounds.y -= margin.top;
        bounds.width += margin.left + margin.right;
        bounds.height += margin.top + margin.bottom;
    }
    var state = Object.values(elementState)
        .filter(function (element) { return layout.has(element.id); })
        .map(function (element) {
        element.bounds.x -= bounds.x;
        element.bounds.y -= bounds.y;
        return element;
    });
    return {
        elements: state,
        bounds: bounds,
    };
};
var getMargin = function (margin) {
    if (typeof margin === 'number') {
        return { top: margin, right: margin, bottom: margin, left: margin };
    }
    var result = { top: 0, right: 0, bottom: 0, left: 0 };
    return Object.assign(result, margin);
};
var Svg = /** @class */ (function (_super) {
    tslib_1.__extends(Svg, _super);
    function Svg() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = getInitialState(_this.props);
        return _this;
    }
    Svg.prototype.render = function () {
        var _a = this.state, bounds = _a.bounds, elements = _a.elements;
        var theme = update_1.update(styles_1.defaults, this.props.styles || {});
        return (react_1.default.createElement("svg", { width: bounds.width + 1, height: bounds.height + 1, xmlns: "http://www.w3.org/2000/svg", xmlnsXlink: "http://www.w3.org/1999/xlink", fillOpacity: 0 },
            react_1.default.createElement("defs", null,
                react_1.default.createElement("style", null, svg_styles_1.Style[0]({ theme: theme }))),
            elements.map(function (element, index) {
                var ElementComponent = components_1.Components[element.type];
                return (react_1.default.createElement("svg", tslib_1.__assign({}, element.bounds, { key: element.id, className: element.name }),
                    react_1.default.createElement(ElementComponent, { key: index, element: element })));
            })));
    };
    return Svg;
}(react_1.Component));
exports.Svg = Svg;
//# sourceMappingURL=svg.js.map