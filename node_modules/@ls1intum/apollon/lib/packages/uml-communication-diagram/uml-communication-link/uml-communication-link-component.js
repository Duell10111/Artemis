"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var uml_element_port_1 = require("../../../services/uml-element/uml-element-port");
var point_1 = require("../../../utils/geometry/point");
exports.UMLCommunicationLinkComponent = function (_a) {
    var _b;
    var element = _a.element;
    var sources = element.messages.filter(function (message) { return message.direction === 'source'; });
    var targets = element.messages.filter(function (message) { return message.direction === 'target'; });
    var position = { x: 0, y: 0 };
    var direction = uml_element_port_1.Direction.Left;
    // maps element.path to Point to get methods
    // element.path contains start and end point + direction change points
    var path = element.path.map(function (point) { return new point_1.Point(point.x, point.y); });
    // half distance of total connection
    var distance = path.reduce(function (length, point, i, points) { return (i + 1 < points.length ? length + points[i + 1].subtract(point).length : length); }, 0) / 2;
    // finds the connection between two points of path where half distance of total connection is reached
    // and determines the direction of the path there
    for (var index = 0; index < path.length - 1; index++) {
        // distance between two path points
        var vector = path[index + 1].subtract(path[index]);
        if (vector.length > distance) {
            var norm = vector.normalize();
            direction =
                Math.abs(norm.x) > Math.abs(norm.y)
                    ? norm.x > 0
                        ? uml_element_port_1.Direction.Left
                        : uml_element_port_1.Direction.Right
                    : norm.y > 0
                        ? uml_element_port_1.Direction.Up
                        : uml_element_port_1.Direction.Down;
            position = path[index].add(norm.scale(distance));
            break;
        }
        distance -= vector.length;
    }
    return (react_1.default.createElement("g", null,
        (_b = {},
            _b[uml_element_port_1.Direction.Up] = (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement("text", { x: position.x, y: position.y, dx: 5, fontSize: "85%", dominantBaseline: "middle", textAnchor: "start", pointerEvents: "none" },
                    react_1.default.createElement("tspan", { fontWeight: "bold", fontSize: "120%" }, sources.length ? '↓' : ''),
                    sources.map(function (source, i) { return (react_1.default.createElement("tspan", { key: i, x: position.x + 20, dy: i === 0 ? undefined : '1.2em' }, source.name)); })),
                react_1.default.createElement("text", { x: position.x, y: position.y, dx: -5, fontSize: "85%", dominantBaseline: "middle", textAnchor: "end", pointerEvents: "none" },
                    react_1.default.createElement("tspan", { fontWeight: "bold", fontSize: "120%" }, targets.length ? '↑' : ''),
                    targets.map(function (target, i) { return (react_1.default.createElement("tspan", { key: i, x: position.x - 20, dy: i === 0 ? undefined : '1.2em' }, target.name)); })))),
            _b[uml_element_port_1.Direction.Right] = (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement("text", { x: position.x, y: position.y, dy: -6, fontSize: "85%", textAnchor: "middle", pointerEvents: "none" },
                    react_1.default.createElement("tspan", { fontWeight: "bold", fontSize: "120%" }, targets.length ? '⟶' : ''),
                    targets.reverse().map(function (target, i) { return (react_1.default.createElement("tspan", { key: i, x: position.x, dy: "-1.2em" }, target.name)); })),
                react_1.default.createElement("text", { x: position.x, y: position.y, dy: 18, fontSize: "85%", textAnchor: "middle", pointerEvents: "none" },
                    react_1.default.createElement("tspan", { fontWeight: "bold", fontSize: "120%" }, sources.length ? '⟵' : ''),
                    sources.map(function (source, i) { return (react_1.default.createElement("tspan", { key: i, x: position.x, dy: "1.2em" }, source.name)); })))),
            _b[uml_element_port_1.Direction.Down] = (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement("text", { x: position.x, y: position.y, dx: 5, fontSize: "85%", dominantBaseline: "middle", textAnchor: "start", pointerEvents: "none" },
                    react_1.default.createElement("tspan", { fontWeight: "bold", fontSize: "120%" }, targets.length ? '↓' : ''),
                    targets.reverse().map(function (target, i) { return (react_1.default.createElement("tspan", { key: i, x: position.x + 20, dy: i === 0 ? undefined : '1.2em' }, target.name)); })),
                react_1.default.createElement("text", { x: position.x, y: position.y, dx: -5, fontSize: "85%", dominantBaseline: "middle", textAnchor: "end", pointerEvents: "none" },
                    react_1.default.createElement("tspan", { fontWeight: "bold", fontSize: "120%" }, sources.length ? '↑' : ''),
                    sources.map(function (source, i) { return (react_1.default.createElement("tspan", { key: i, x: position.x - 20, dy: i === 0 ? undefined : '1.2em' }, source.name)); })))),
            _b[uml_element_port_1.Direction.Left] = (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement("text", { x: position.x, y: position.y, dy: -6, fontSize: "85%", textAnchor: "middle", pointerEvents: "none" },
                    react_1.default.createElement("tspan", { fontWeight: "bold", fontSize: "120%" }, sources.length ? '⟶' : ''),
                    sources.reverse().map(function (source, i) { return (react_1.default.createElement("tspan", { key: i, x: position.x, dy: "-1.2em" }, source.name)); })),
                react_1.default.createElement("text", { x: position.x, y: position.y, dy: 18, fontSize: "85%", textAnchor: "middle", pointerEvents: "none" },
                    react_1.default.createElement("tspan", { fontWeight: "bold", fontSize: "120%" }, targets.length ? '⟵' : ''),
                    targets.map(function (target, i) { return (react_1.default.createElement("tspan", { key: i, x: position.x, dy: "1.2em" }, target.name)); })))),
            _b)[direction],
        react_1.default.createElement("polyline", { points: element.path.map(function (point) { return point.x + " " + point.y; }).join(','), stroke: "black", fill: "none", strokeWidth: 1 })));
};
//# sourceMappingURL=uml-communication-link-component.js.map