import { Component, RefObject } from 'react';
import { IUMLElement } from '../../services/uml-element/uml-element';
import { UMLElementRepository } from '../../services/uml-element/uml-element-repository';
import { AsyncAction, AsyncDispatch } from '../../utils/actions/actions';
declare type OwnProps = {
    element: IUMLElement;
};
declare type StateProps = {};
declare type DispatchProps = {
    getChildren: AsyncDispatch<typeof UMLElementRepository.getChildren>;
    assessNext: AsyncDispatch<(current: IUMLElement) => AsyncAction>;
};
declare type Props = OwnProps & StateProps & DispatchProps;
declare const getInitialState: ({ element, getChildren }: Props) => {
    elements: IUMLElement[];
};
declare type State = ReturnType<typeof getInitialState>;
declare class AssessmentComponent extends Component<Props, State> {
    state: {
        elements: IUMLElement[];
    };
    container: RefObject<HTMLDivElement>;
    componentDidMount(): void;
    componentDidUpdate(props: Props): void;
    render(): JSX.Element;
    private setFocus;
    private onKey;
    private next;
}
export declare const Assessment: import("react-redux").ConnectedComponentClass<typeof AssessmentComponent, Pick<Props, "element"> & OwnProps>;
export {};
