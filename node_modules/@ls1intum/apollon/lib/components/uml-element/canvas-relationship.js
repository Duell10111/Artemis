"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var react_redux_1 = require("react-redux");
var redux_1 = require("redux");
var components_1 = require("../../packages/components");
var editor_types_1 = require("../../services/editor/editor-types");
var uml_relationship_repository_1 = require("../../services/uml-relationship/uml-relationship-repository");
var styles_1 = require("../theme/styles");
var enhance = redux_1.compose(styles_1.withTheme, react_redux_1.connect(function (state, props) { return ({
    hovered: state.hovered[0] === props.id,
    selected: state.selected.includes(props.id),
    interactive: state.interactive.includes(props.id),
    interactable: state.editor.view === "Exporting" /* Exporting */ || state.editor.view === "Highlight" /* Highlight */,
    reconnecting: !!state.reconnecting[props.id],
    disabled: !!Object.keys(state.reconnecting).length || !!Object.keys(state.connecting).length,
    relationship: state.elements[props.id],
    mode: state.editor.mode,
}); }, {}));
var CanvasRelationshipComponent = /** @class */ (function (_super) {
    tslib_1.__extends(CanvasRelationshipComponent, _super);
    function CanvasRelationshipComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CanvasRelationshipComponent.prototype.render = function () {
        var _a = this.props, hovered = _a.hovered, selected = _a.selected, interactive = _a.interactive, interactable = _a.interactable, reconnecting = _a.reconnecting, disabled = _a.disabled, relationship = _a.relationship, children = _a.children, theme = _a.theme, mode = _a.mode, props = tslib_1.__rest(_a, ["hovered", "selected", "interactive", "interactable", "reconnecting", "disabled", "relationship", "children", "theme", "mode"]);
        // increase relationship hit box in assessment mode
        var STROKE = mode == editor_types_1.ApollonMode.Assessment ? 35 : 15;
        var ChildComponent = components_1.Components[relationship.type];
        var points = relationship.path.map(function (point) { return point.x + " " + point.y; }).join(',');
        var highlight = interactable && interactive
            ? theme.interactive.normal
            : interactable && hovered
                ? theme.interactive.hovered
                : hovered || selected
                    ? 'rgba(0, 100, 255, 0.2)'
                    : relationship.highlight
                        ? relationship.highlight
                        : undefined;
        return (react_1.default.createElement("svg", tslib_1.__assign({}, props, relationship.bounds, { visibility: reconnecting ? 'hidden' : undefined, pointerEvents: disabled ? 'none' : 'stroke' }),
            react_1.default.createElement("polyline", { points: points, stroke: highlight, fill: "none", strokeWidth: STROKE }),
            react_1.default.createElement(ChildComponent, { element: uml_relationship_repository_1.UMLRelationshipRepository.get(relationship) }),
            children));
    };
    return CanvasRelationshipComponent;
}(react_1.Component));
exports.CanvasRelationshipComponent = CanvasRelationshipComponent;
exports.CanvasRelationship = enhance(CanvasRelationshipComponent);
//# sourceMappingURL=canvas-relationship.js.map