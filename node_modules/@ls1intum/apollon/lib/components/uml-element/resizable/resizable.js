"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var react_redux_1 = require("react-redux");
var uml_element_repository_1 = require("../../../services/uml-element/uml-element-repository");
var point_1 = require("../../../utils/geometry/point");
var styles_1 = require("../../theme/styles");
var initialState = {
    resizing: false,
    offset: new point_1.Point(),
};
var enhance = react_redux_1.connect(null, {
    start: uml_element_repository_1.UMLElementRepository.startResizing,
    resize: uml_element_repository_1.UMLElementRepository.resize,
    end: uml_element_repository_1.UMLElementRepository.endResizing,
});
var Handle = styles_1.styled.rect.attrs({
    x: '100%',
    y: '100%',
    width: 15,
    height: 15,
    transform: 'translate(-10, -10)',
    fill: 'none',
})(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["\n  cursor: nwse-resize;\n  pointer-events: all;\n"], ["\n  cursor: nwse-resize;\n  pointer-events: all;\n"])));
exports.resizable = function (options) { return function (WrappedComponent) {
    var Resizable = /** @class */ (function (_super) {
        tslib_1.__extends(Resizable, _super);
        function Resizable() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.state = initialState;
            _this.resize = function (width, height) {
                width = Math.round(width / 10) * 10;
                height = Math.round(height / 10) * 10;
                if (options && options.preventX)
                    width = 0;
                if (options && options.preventY)
                    height = 0;
                if (width === 0 && height === 0)
                    return;
                _this.setState(function (state) { return ({ offset: state.offset.add(width, height) }); });
                _this.props.resize({ width: width, height: height });
            };
            _this.onPointerDown = function (event) {
                if (event.nativeEvent.which && event.nativeEvent.which !== 1) {
                    return;
                }
                _this.setState({ resizing: true, offset: new point_1.Point(event.clientX, event.clientY) });
                _this.props.start();
                var element = event.currentTarget;
                element.setPointerCapture(event.pointerId);
                element.addEventListener('pointermove', _this.onPointerMove);
                element.addEventListener('pointerup', _this.onPointerUp, { once: true });
            };
            _this.onPointerMove = function (event) {
                var width = event.clientX - _this.state.offset.x;
                var height = event.clientY - _this.state.offset.y;
                _this.resize(width, height);
            };
            _this.onPointerUp = function (event) {
                var element = event.currentTarget;
                if (!element) {
                    return;
                }
                element.releasePointerCapture(event.pointerId);
                element.removeEventListener('pointermove', _this.onPointerMove);
                _this.setState(initialState);
                _this.props.end();
            };
            return _this;
        }
        Resizable.prototype.componentWillUnmount = function () {
            document.removeEventListener('pointermove', this.onPointerMove);
            document.removeEventListener('pointerup', this.onPointerUp);
        };
        Resizable.prototype.render = function () {
            var _a = this.props, start = _a.start, resize = _a.resize, end = _a.end, props = tslib_1.__rest(_a, ["start", "resize", "end"]);
            return (react_1.default.createElement(WrappedComponent, tslib_1.__assign({}, props),
                props.children,
                react_1.default.createElement(Handle, { onPointerDown: this.onPointerDown })));
        };
        return Resizable;
    }(react_1.Component));
    return enhance(Resizable);
}; };
var templateObject_1;
//# sourceMappingURL=resizable.js.map