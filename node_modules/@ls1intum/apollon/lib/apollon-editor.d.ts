import 'pepjs';
import { DeepPartial } from 'redux';
import { Styles } from './components/theme/styles';
import { Locale } from './services/editor/editor-types';
import * as Apollon from './typings';
import { UMLDiagramType, UMLModel } from './typings';
export declare class ApollonEditor {
    private container;
    private options;
    get model(): Apollon.UMLModel;
    set model(model: Apollon.UMLModel);
    set type(diagramType: UMLDiagramType);
    set locale(locale: Locale);
    static exportModelAsSvg(model: Apollon.UMLModel, options?: Apollon.ExportOptions, theme?: DeepPartial<Styles>): Apollon.SVG;
    selection: Apollon.Selection;
    private currentModel?;
    private assessments;
    private application;
    private selectionSubscribers;
    private assessmentSubscribers;
    private modelSubscribers;
    constructor(container: HTMLElement, options: Apollon.ApollonOptions);
    destroy(): void;
    select(selection: Apollon.Selection): void;
    subscribeToSelectionChange(callback: (selection: Apollon.Selection) => void): number;
    unsubscribeFromSelectionChange(subscriptionId: number): void;
    subscribeToAssessmentChange(callback: (assessments: Apollon.Assessment[]) => void): number;
    unsubscribeFromAssessmentChange(subscriptionId: number): void;
    subscribeToModelChange(callback: (model: UMLModel) => void): number;
    unsubscribeFromModelChange(subscriptionId: number): void;
    exportAsSVG(options?: Apollon.ExportOptions): Apollon.SVG;
    private componentDidMount;
    /**
     * Triggered whenever an action is dispatched which potentially lead to a change in the store / state tree
     * Used to notify all the selection and assessment subscribers of Apollon
     */
    private onDispatch;
    private notifyModelSubscribers;
    private recreateEditor;
    private get store();
}
