"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
require("pepjs");
var react_1 = require("react");
var react_dom_1 = require("react-dom");
var model_state_1 = require("./components/store/model-state");
var uml_element_type_1 = require("./packages/uml-element-type");
var uml_relationship_type_1 = require("./packages/uml-relationship-type");
var application_1 = require("./scenes/application");
var svg_1 = require("./scenes/svg");
var editor_types_1 = require("./services/editor/editor-types");
var uml_diagram_1 = require("./services/uml-diagram/uml-diagram");
var uml_element_repository_1 = require("./services/uml-element/uml-element-repository");
var debounce_1 = require("./utils/debounce");
var ApollonEditor = /** @class */ (function () {
    function ApollonEditor(container, options) {
        var _this = this;
        this.container = container;
        this.options = options;
        this.selection = { elements: [], relationships: [] };
        this.assessments = [];
        this.application = react_1.createRef();
        this.selectionSubscribers = [];
        this.assessmentSubscribers = [];
        this.modelSubscribers = [];
        this.componentDidMount = function () {
            _this.container.setAttribute('touch-action', 'none');
            setTimeout(function () {
                if (_this.store) {
                    _this.store.subscribe(_this.onDispatch);
                }
            });
        };
        /**
         * Triggered whenever an action is dispatched which potentially lead to a change in the store / state tree
         * Used to notify all the selection and assessment subscribers of Apollon
         */
        this.onDispatch = function () {
            if (!_this.store)
                return;
            var _a = _this.store.getState(), elements = _a.elements, selected = _a.selected, assessments = _a.assessments;
            var selection = {
                elements: selected.filter(function (id) { return elements[id].type in uml_element_type_1.UMLElementType; }),
                relationships: selected.filter(function (id) { return elements[id].type in uml_relationship_type_1.UMLRelationshipType; }),
            };
            // check if previous selection differs from current selection, if yes -> notify subscribers
            if (JSON.stringify(_this.selection) !== JSON.stringify(selection)) {
                _this.selectionSubscribers.forEach(function (subscriber) { return subscriber(selection); });
                _this.selection = selection;
            }
            var umlAssessments = Object.keys(assessments).map(function (id) { return ({
                modelElementId: id,
                elementType: elements[id].type,
                score: assessments[id].score,
                feedback: assessments[id].feedback,
            }); });
            // check if previous assessment differs from current selection, if yes -> notify subscribers
            if (JSON.stringify(_this.assessments) !== JSON.stringify(umlAssessments)) {
                _this.assessmentSubscribers.forEach(function (subscriber) { return subscriber(umlAssessments); });
                _this.assessments = umlAssessments;
            }
            // notfiy that action was done
            _this.notifyModelSubscribers();
        };
        this.notifyModelSubscribers = debounce_1.debounce(function () {
            // if store is not available -> apollon-editor is destroyed
            // -> no need to emit latest changes
            if (!_this.store)
                return;
            var model = _this.model;
            if ((!_this.currentModel && model) ||
                (_this.currentModel && JSON.stringify(model) !== JSON.stringify(_this.currentModel))) {
                _this.modelSubscribers.forEach(function (subscriber) { return subscriber(model); });
                _this.currentModel = model;
            }
            else {
                _this.currentModel = model;
            }
        }, 50);
        var state = options.model ? model_state_1.ModelState.fromModel(options.model) : {};
        state = tslib_1.__assign(tslib_1.__assign({}, state), { diagram: new uml_diagram_1.UMLDiagram(tslib_1.__assign(tslib_1.__assign({}, state.diagram), { type: options.type })), editor: tslib_1.__assign(tslib_1.__assign({}, state.editor), { view: "Modelling" /* Modelling */, mode: options.mode || editor_types_1.ApollonMode.Exporting, readonly: options.readonly || false, enablePopups: options.enablePopups === true || options.enablePopups === undefined, features: {
                    hoverable: true,
                    selectable: true,
                    movable: !options.readonly,
                    resizable: !options.readonly,
                    connectable: !options.readonly,
                    updatable: !options.readonly,
                    droppable: !options.readonly,
                } }) });
        var element = react_1.createElement(application_1.Application, {
            ref: this.application,
            state: state,
            styles: options.theme,
            locale: options.locale,
        });
        react_dom_1.render(element, container, this.componentDidMount);
        this.currentModel = this.model;
    }
    Object.defineProperty(ApollonEditor.prototype, "model", {
        get: function () {
            if (!this.store)
                throw new Error('Apollon was already destroyed.');
            return model_state_1.ModelState.toModel(this.store.getState());
        },
        set: function (model) {
            if (!this.store)
                throw new Error('Apollon was already destroyed.');
            var state = tslib_1.__assign(tslib_1.__assign({}, model_state_1.ModelState.fromModel(model)), { editor: tslib_1.__assign({}, this.store.getState().editor) });
            this.recreateEditor(state);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ApollonEditor.prototype, "type", {
        set: function (diagramType) {
            if (!this.store)
                throw new Error('Apollon was already destroyed.');
            var state = tslib_1.__assign(tslib_1.__assign({}, this.store.getState()), { diagram: new uml_diagram_1.UMLDiagram({
                    type: diagramType,
                }), elements: undefined });
            this.recreateEditor(state);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ApollonEditor.prototype, "locale", {
        set: function (locale) {
            if (!this.store)
                throw new Error('Apollon was already destroyed.');
            var state = this.store.getState();
            this.options.locale = locale;
            this.recreateEditor(state);
        },
        enumerable: true,
        configurable: true
    });
    ApollonEditor.exportModelAsSvg = function (model, options, theme) {
        var div = document.createElement('div');
        var element = react_1.createElement(svg_1.Svg, { model: model, options: options, styles: theme });
        var svg = react_dom_1.render(element, div);
        var innerHTML = div.innerHTML;
        react_dom_1.unmountComponentAtNode(div);
        return {
            svg: innerHTML,
            clip: svg.state.bounds,
        };
    };
    ApollonEditor.prototype.destroy = function () {
        react_dom_1.unmountComponentAtNode(this.container);
    };
    ApollonEditor.prototype.select = function (selection) {
        if (!this.store)
            return;
        var dispatch = this.store.dispatch;
        dispatch(uml_element_repository_1.UMLElementRepository.deselect());
        dispatch(uml_element_repository_1.UMLElementRepository.select(tslib_1.__spread(selection.elements, selection.relationships)));
    };
    ApollonEditor.prototype.subscribeToSelectionChange = function (callback) {
        return this.selectionSubscribers.push(callback) - 1;
    };
    ApollonEditor.prototype.unsubscribeFromSelectionChange = function (subscriptionId) {
        this.selectionSubscribers.splice(subscriptionId);
    };
    ApollonEditor.prototype.subscribeToAssessmentChange = function (callback) {
        return this.assessmentSubscribers.push(callback) - 1;
    };
    ApollonEditor.prototype.unsubscribeFromAssessmentChange = function (subscriptionId) {
        this.assessmentSubscribers.splice(subscriptionId);
    };
    ApollonEditor.prototype.subscribeToModelChange = function (callback) {
        return this.modelSubscribers.push(callback) - 1;
    };
    ApollonEditor.prototype.unsubscribeFromModelChange = function (subscriptionId) {
        this.modelSubscribers.splice(subscriptionId);
    };
    ApollonEditor.prototype.exportAsSVG = function (options) {
        return ApollonEditor.exportModelAsSvg(this.model, options, this.options.theme);
    };
    ApollonEditor.prototype.recreateEditor = function (state) {
        this.destroy();
        var element = react_1.createElement(application_1.Application, {
            ref: this.application,
            state: state,
            styles: this.options.theme,
            locale: this.options.locale,
        });
        react_dom_1.render(element, this.container, this.componentDidMount);
    };
    Object.defineProperty(ApollonEditor.prototype, "store", {
        get: function () {
            return (this.application.current &&
                this.application.current.store.current &&
                this.application.current.store.current.state.store);
        },
        enumerable: true,
        configurable: true
    });
    return ApollonEditor;
}());
exports.ApollonEditor = ApollonEditor;
//# sourceMappingURL=apollon-editor.js.map