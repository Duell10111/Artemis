"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockControlValueAccessor = exports.Mock = void 0;
const core_1 = require("@angular/core");
const mock_service_1 = require("../mock-service");
class Mock {
    constructor() {
        this.__ngMocksMock = true;
        for (const output of this.__mockedOutputs) {
            if (this[output] || Object.getOwnPropertyDescriptor(this, output)) {
                continue;
            }
            this[output] = new core_1.EventEmitter();
        }
        const prototype = Object.getPrototypeOf(this);
        for (const method of mock_service_1.mockServiceHelper.extractMethodsFromPrototype(prototype)) {
            const descriptor = mock_service_1.mockServiceHelper.extractPropertyDescriptor(prototype, method);
            if (descriptor) {
                Object.defineProperty(this, method, descriptor);
            }
        }
        for (const prop of mock_service_1.mockServiceHelper.extractPropertiesFromPrototype(prototype)) {
            const descriptor = mock_service_1.mockServiceHelper.extractPropertyDescriptor(prototype, prop);
            if (!descriptor) {
                continue;
            }
            Object.defineProperty(this, prop, descriptor);
        }
        for (const method of mock_service_1.mockServiceHelper.extractMethodsFromPrototype(this.constructor.mockOf.prototype)) {
            if (this[method] || Object.getOwnPropertyDescriptor(this, method)) {
                continue;
            }
            mock_service_1.mockServiceHelper.mock(this, method);
        }
        for (const prop of mock_service_1.mockServiceHelper.extractPropertiesFromPrototype(this.constructor.mockOf.prototype)) {
            if (this[prop] || Object.getOwnPropertyDescriptor(this, prop)) {
                continue;
            }
            mock_service_1.mockServiceHelper.mock(this, prop, 'get');
            mock_service_1.mockServiceHelper.mock(this, prop, 'set');
        }
        Object.setPrototypeOf(this, this.constructor.mockOf.prototype);
    }
}
exports.Mock = Mock;
class MockControlValueAccessor extends Mock {
    constructor() {
        super(...arguments);
        this.__ngMocksMockControlValueAccessor = true;
        this.__simulateChange = (value) => { };
        this.__simulateTouch = () => { };
        this.__simulateValidatorChange = () => { };
        this.setDisabledState = (isDisabled) => { };
        this.validate = (control) => null;
        this.writeValue = (value) => { };
    }
    registerOnChange(fn) {
        this.__simulateChange = fn;
    }
    registerOnTouched(fn) {
        this.__simulateTouch = fn;
    }
    registerOnValidatorChange(fn) {
        this.__simulateValidatorChange = fn;
    }
}
exports.MockControlValueAccessor = MockControlValueAccessor;
//# sourceMappingURL=Mock.js.map