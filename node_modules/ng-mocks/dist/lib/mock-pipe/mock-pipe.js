"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockPipe = exports.MockPipes = void 0;
const core_1 = require("@angular/core");
const testing_1 = require("@angular/core/testing");
const common_1 = require("../common");
const ng_mocks_universe_1 = require("../common/ng-mocks-universe");
const reflect_1 = require("../common/reflect");
function MockPipes(...pipes) {
    return pipes.map(pipe => MockPipe(pipe, undefined));
}
exports.MockPipes = MockPipes;
const defaultTransform = (...args) => undefined;
function MockPipe(pipe, transform = defaultTransform) {
    if (testing_1.getTestBed()._instantiated) {
        try {
            return common_1.getMockedNgDefOf(pipe, 'p');
        }
        catch (error) {
        }
    }
    if (ng_mocks_universe_1.ngMocksUniverse.flags.has('cachePipe') && ng_mocks_universe_1.ngMocksUniverse.cache.has(pipe)) {
        return ng_mocks_universe_1.ngMocksUniverse.cache.get(pipe);
    }
    let meta;
    if (!meta) {
        try {
            meta = reflect_1.pipeResolver.resolve(pipe);
        }
        catch (e) {
            throw new Error('ng-mocks is not in JIT mode and cannot resolve declarations');
        }
    }
    const { name } = meta;
    const options = {
        name,
    };
    let PipeMock = class PipeMock extends common_1.Mock {
        constructor() {
            super(...arguments);
            this.transform = transform || defaultTransform;
        }
    };
    PipeMock = __decorate([
        core_1.Pipe(options),
        common_1.MockOf(pipe)
    ], PipeMock);
    if (ng_mocks_universe_1.ngMocksUniverse.flags.has('cachePipe')) {
        ng_mocks_universe_1.ngMocksUniverse.cache.set(pipe, PipeMock);
    }
    return PipeMock;
}
exports.MockPipe = MockPipe;
//# sourceMappingURL=mock-pipe.js.map