"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockDirective = exports.MockDirectives = void 0;
const core_1 = require("@angular/core");
const testing_1 = require("@angular/core/testing");
const forms_1 = require("@angular/forms");
const common_1 = require("../common");
const decorate_1 = require("../common/decorate");
const ng_mocks_universe_1 = require("../common/ng-mocks-universe");
const reflect_1 = require("../common/reflect");
function MockDirectives(...directives) {
    return directives.map(MockDirective);
}
exports.MockDirectives = MockDirectives;
function MockDirective(directive) {
    if (testing_1.getTestBed()._instantiated) {
        try {
            return common_1.getMockedNgDefOf(directive, 'd');
        }
        catch (error) {
        }
    }
    if (ng_mocks_universe_1.ngMocksUniverse.flags.has('cacheDirective') && ng_mocks_universe_1.ngMocksUniverse.cache.has(directive)) {
        return ng_mocks_universe_1.ngMocksUniverse.cache.get(directive);
    }
    let meta;
    if (!meta) {
        try {
            meta = reflect_1.directiveResolver.resolve(directive);
        }
        catch (e) {
            throw new Error('ng-mocks is not in JIT mode and cannot resolve declarations');
        }
    }
    const { selector, exportAs, inputs, outputs, queries, providers } = meta;
    const options = {
        exportAs,
        providers: [
            {
                provide: directive,
                useExisting: core_1.forwardRef(() => DirectiveMock),
            },
        ],
        selector,
    };
    for (const providerDef of common_1.flatten(providers)) {
        const provider = providerDef && typeof providerDef === 'object' && providerDef.provide ? providerDef.provide : providerDef;
        if (options.providers && provider === forms_1.NG_VALUE_ACCESSOR) {
            options.providers.push({
                multi: true,
                provide: forms_1.NG_VALUE_ACCESSOR,
                useExisting: core_1.forwardRef(() => DirectiveMock),
            });
        }
        if (options.providers && provider === forms_1.NG_VALIDATORS) {
            options.providers.push({
                multi: true,
                provide: forms_1.NG_VALIDATORS,
                useExisting: core_1.forwardRef(() => DirectiveMock),
            });
        }
    }
    const config = ng_mocks_universe_1.ngMocksUniverse.config.get(directive);
    let DirectiveMock = class DirectiveMock extends common_1.MockControlValueAccessor {
        constructor(element, template, viewContainer) {
            super();
            this.__element = element;
            this.__template = template;
            this.__viewContainer = viewContainer;
            this.__isStructural = template && viewContainer;
            this.__render = ($implicit, variables) => {
                if (viewContainer && template) {
                    viewContainer.clear();
                    viewContainer.createEmbeddedView(template, Object.assign(Object.assign({}, variables), { $implicit }));
                }
            };
        }
        ngOnInit() {
            if (config && config.render) {
                const { $implicit, variables } = config.render !== true
                    ? config.render
                    : {
                        $implicit: undefined,
                        variables: {},
                    };
                this.__render($implicit, variables);
            }
        }
    };
    DirectiveMock = __decorate([
        core_1.Directive(options),
        common_1.MockOf(directive, outputs),
        __param(0, core_1.Optional()),
        __param(1, core_1.Optional()),
        __param(2, core_1.Optional()),
        __metadata("design:paramtypes", [core_1.ElementRef,
            core_1.TemplateRef,
            core_1.ViewContainerRef])
    ], DirectiveMock);
    decorate_1.decorateInputs(DirectiveMock, inputs);
    decorate_1.decorateOutputs(DirectiveMock, outputs);
    decorate_1.decorateQueries(DirectiveMock, queries);
    if (ng_mocks_universe_1.ngMocksUniverse.flags.has('cacheDirective')) {
        ng_mocks_universe_1.ngMocksUniverse.cache.set(directive, DirectiveMock);
    }
    return DirectiveMock;
}
exports.MockDirective = MockDirective;
//# sourceMappingURL=mock-directive.js.map