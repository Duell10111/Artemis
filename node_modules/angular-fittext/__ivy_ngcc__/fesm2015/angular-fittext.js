import { Directive, ElementRef, HostListener, Input, Renderer2, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
class AngularFittextDirective {
    /**
     * @param {?} el
     * @param {?} renderer
     */
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.fittext = true;
        this.compression = 1;
        this.activateOnResize = true;
        this.minFontSize = 0;
        this.maxFontSize = Number.POSITIVE_INFINITY;
        this.delay = 100;
        this.fontUnit = 'px';
        this.calcSize = 10;
        this.onWindowResize = () => {
            if (this.activateOnResize) {
                this.setFontSize();
            }
        };
        this.setFontSize = () => {
            this.resizeTimeout = setTimeout((() => {
                if (this.fittextElement.offsetHeight * this.fittextElement.offsetWidth !== 0) {
                    // reset to default
                    this.setStyles(this.calcSize, 1, 'inline-block');
                    // set new
                    this.setStyles(this.calculateNewFontSize(), this.lineHeight, this.display);
                }
            }).bind(this), this.delay);
        };
        this.calculateNewFontSize = () => {
            const /** @type {?} */ ratio = (this.calcSize * this.newlines) / this.fittextElement.offsetWidth / this.newlines;
            return Math.max(Math.min((this.fittextParent.offsetWidth -
                (parseFloat(getComputedStyle(this.fittextParent).paddingLeft) +
                    parseFloat(getComputedStyle(this.fittextParent).paddingRight)) -
                6) *
                ratio *
                this.compression, this.fittextMaxFontSize), this.fittextMinFontSize);
        };
        this.setStyles = (fontSize, lineHeight, display) => {
            this.renderer.setStyle(this.fittextElement, 'fontSize', fontSize.toString() + this.fontUnit);
            this.renderer.setStyle(this.fittextElement, 'lineHeight', lineHeight.toString());
            this.renderer.setStyle(this.fittextElement, 'display', display);
        };
        this.fittextElement = el.nativeElement;
        this.fittextParent = this.fittextElement.parentElement;
        this.computed = window.getComputedStyle(this.fittextElement);
        this.newlines = this.fittextElement.childElementCount > 0 ? this.fittextElement.childElementCount : 1;
        this.lineHeight = this.computed['line-height'];
        this.display = this.computed['display'];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.fittextMinFontSize = this.minFontSize === 'inherit' ? this.computed['font-size'] : this.minFontSize;
        this.fittextMaxFontSize = this.maxFontSize === 'inherit' ? this.computed['font-size'] : this.maxFontSize;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.setFontSize();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['compression'] && !changes['compression'].firstChange) {
            this.setFontSize();
        }
        if (changes['ngModel']) {
            this.fittextElement.innerHTML = this.ngModel;
            this.setFontSize();
        }
    }
}
AngularFittextDirective.ɵfac = function AngularFittextDirective_Factory(t) { return new (t || AngularFittextDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
AngularFittextDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AngularFittextDirective, selectors: [["", "fittext", ""]], hostBindings: function AngularFittextDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("resize", function AngularFittextDirective_resize_HostBindingHandler() { return ctx.onWindowResize(); }, false, ɵngcc0.ɵɵresolveWindow);
    } }, inputs: { fittext: "fittext", compression: "compression", activateOnResize: "activateOnResize", minFontSize: "minFontSize", maxFontSize: "maxFontSize", delay: "delay", fontUnit: "fontUnit", ngModel: "ngModel" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
/** @nocollapse */
AngularFittextDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
AngularFittextDirective.propDecorators = {
    "fittext": [{ type: Input },],
    "compression": [{ type: Input },],
    "activateOnResize": [{ type: Input },],
    "minFontSize": [{ type: Input },],
    "maxFontSize": [{ type: Input },],
    "delay": [{ type: Input },],
    "ngModel": [{ type: Input },],
    "fontUnit": [{ type: Input },],
    "onWindowResize": [{ type: HostListener, args: ['window:resize',] },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AngularFittextDirective, [{
        type: Directive,
        args: [{
                selector: '[fittext]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { fittext: [{
            type: Input
        }], compression: [{
            type: Input
        }], activateOnResize: [{
            type: Input
        }], minFontSize: [{
            type: Input
        }], maxFontSize: [{
            type: Input
        }], delay: [{
            type: Input
        }], fontUnit: [{
            type: Input
        }], onWindowResize: [{
            type: HostListener,
            args: ['window:resize']
        }], ngModel: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AngularFittextModule {
}
AngularFittextModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AngularFittextModule });
AngularFittextModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AngularFittextModule_Factory(t) { return new (t || AngularFittextModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AngularFittextModule, { declarations: [AngularFittextDirective], exports: [AngularFittextDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AngularFittextModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    AngularFittextDirective
                ],
                exports: [
                    AngularFittextDirective
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { AngularFittextModule, AngularFittextDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,