version: '3'

# NOTE: this docker compose file starts the artemis-server (as jar file) and the artemis-client in separate containers. This setup is aimed for development.
# If you want to start the whole Artemis application (server and client) in the same container, you need to specify a different service and
# you have to execute the command './gradlew -Pprod -Pwar clean bootWar && java -jar build/libs/*.war --spring.profiles.active=dev,artemis,bamboo,bitbucket,jira'

services:
  artemis-server-build:
    command: sh -c "./gradlew buildJarForDocker"
    depends_on:
        - artemis-mysql
    image: openjdk:12-jdk-alpine
    volumes:
        - ./:/server/
    working_dir: /server

  artemis-server:
    command: sh -c "sleep 90 && java -jar build/libs/Artemis-*.jar"
    depends_on:
      - artemis-mysql
    image: openjdk:12-jdk-alpine
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://artemis-mysql:3306/Artemis?createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC
      - SPRING_PROFILES_ACTIVE=dev,bamboo,bitbucket,jira,artemis
      - VIRTUAL_HOST=localhost
    networks:
      - artemis
    expose:
      - "8080"
    volumes:
      - ./:/server/
    working_dir: /server

#  artemis-client:
#    command: sh -c "yarn install && yarn start-docker"
#    depends_on:
#      - artemis-server
#    image: node:12.8.0-alpine
#    networks:
#      - artemis
#    ports:
#      - 9000:9000
#    volumes:
#      - ./:/client/
#    working_dir: /client

  artemis-mysql:
    command: mysqld --lower_case_table_names=1 --skip-ssl --character_set_server=utf8mb4 --explicit_defaults_for_timestamp
    environment:
      - MYSQL_USER=root
      - MYSQL_ALLOW_EMPTY_PASSWORD=yes
      - MYSQL_DATABASE=Artemis
    image: mysql:8.0.17
    networks:
      - artemis
    ports:
      - 3306:3306
    volumes:
      - ./data/.db:/var/lib/mysql

  nginx:
    image: jwilder/nginx-proxy
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
    networks:
      - artemis
    depends_on:
      - artemis-server
    ports:
      - "4000:80"
    # Copied from https://github.com/nginx-proxy/nginx-proxy/pull/299
    command: >
        bash -c "

        sed -i -e 's/^\(upstream .*\)/\1 \n     ip_hash;/g' nginx.tmpl ;
        forego start -r
        "

networks:
  artemis:
    driver: bridge
