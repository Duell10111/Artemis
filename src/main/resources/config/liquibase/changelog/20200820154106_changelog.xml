<?xml version="1.1" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">
    <changeSet author="sebastianjagla" id="20200820154100">
        <!-- fill student score with existing results -->
        <sql>
            insert into student_score (student_id, exercise_id, result_id, score)
            select p.student_id, e.id, r.id, r.score
            from participation p, exercise e, result r
            where e.id = p.exercise_id and p.id = r.participation_id and r.rated = 1 and r.score is not null
        </sql>
        <!-- fill tutor score with empty objects -->
        <sql>
            insert into tutor_score (tutor_id, exercise_id)
            select u.id, e.id
            from exercise e, course c, user_groups ug, jhi_user u
            where e.course_id = c.id and c.teaching_assistant_group_name = ug.groups and ug.user_id = u.id
        </sql>
        <sql>
            insert into tutor_score (tutor_id, exercise_id)
            select u.id, e.id
            from exercise e, exercise_group eg, exam ex, course c, user_groups ug, jhi_user u
            where e.exercise_group_id = eg.id and eg.exam_id = ex.id and ex.course_id = c.id and c.teaching_assistant_group_name = ug.groups and ug.user_id = u.id
        </sql>
    </changeSet>
    <changeSet author="sebastianjagla" id="20200820154101">
        <!-- temporary views to help with filling of tutor score for exam exercises -->
        <createView replaceIfExists="true" viewName="view_tutor_exam_leaderboard_answered_more_feedback_requests">select count(*) as answered_requests, sum(e.`max_score`) as points, u.id as user_id, u.first_name, ex.id as exam_id, e.id as exercise_id from jhi_user u, user_groups g, course c, exam ex, exercise_group eg, exercise e, participation p, result r, complaint cp
            where cp.complaint_type = 'MORE_FEEDBACK' and g.`user_id` = u.id and g.`groups` = c.`teaching_assistant_group_name` and c.id = ex.course_id and ex.id = eg.exam_id and eg.id = e.exercise_group_id and p.`exercise_id` = e.id and e.`discriminator` in ('M', 'T', 'F', 'P') and r.`participation_id` = p.id and r.`assessor_id` = u.id and cp.`result_id` = r.id and cp.`accepted` is null and r.`completion_date` is not null group by u.id, e.id</createView>
        <createView replaceIfExists="true" viewName="view_tutor_exam_leaderboard_assessments">select count(*) as assessments, sum(e.`max_score`) as points, u.id as user_id, u.first_name, ex.id as exam_id, e.id as exercise_id from jhi_user u, user_groups g, course c, exam ex, exercise_group eg, exercise e, participation p, result r
            where g.`user_id` = u.id and g.`groups` = c.`teaching_assistant_group_name` and c.id = ex.course_id and ex.id = eg.exam_id and eg.id = e.exercise_group_id and p.`exercise_id` = e.id and e.`discriminator` in ('M', 'T', 'F') and r.`participation_id` = p.id and r.`assessor_id` = u.id and r.`completion_date` is not null group by u.id, e.id</createView>
        <createView replaceIfExists="true" viewName="view_tutor_exam_leaderboard_complaint_responses">select count(*) as complaint_responses, sum(e.`max_score`) as points, u.id as user_id, u.first_name, ex.id as exam_id, e.id as exercise_id from jhi_user u, user_groups g, course c, exam ex, exercise_group eg, exercise e, participation p, result r, complaint cp, complaint_response cr
            where g.`user_id` = u.id and g.`groups` = c.`teaching_assistant_group_name` and c.id = ex.course_id and ex.id = eg.exam_id and eg.id = e.exercise_group_id and p.`exercise_id` = e.id and e.`discriminator` in ('M', 'T') and r.`participation_id` = p.id and cr.`reviewer_id` = u.id and cp.`result_id` = r.id and cp.id = cr.`complaint_id` and cp.`accepted` is not null and r.`completion_date` is not null group by u.id, e.id</createView>
        <createView replaceIfExists="true" viewName="view_tutor_exam_leaderboard_complaints">select count(*) as all_complaints, sum(case when `cp`.`accepted` = 1 then 1 else 0 end) AS `accepted_complaints`, sum(case when `cp`.`accepted` = 1 then `e`.`max_score` else 0 end) as points, u.id as user_id, u.first_name, ex.id as exam_id, e.id as exercise_id from jhi_user u, user_groups g, course c, exam ex, exercise_group eg, exercise e, participation p, result r, complaint cp
            where cp.complaint_type = 'COMPLAINT' and g.`user_id` = u.id and g.`groups` = c.`teaching_assistant_group_name` and c.id = ex.course_id and ex.id = eg.exam_id and eg.id = e.exercise_group_id and p.`exercise_id` = e.id and e.`discriminator` in ('M', 'T', 'F', 'P') and r.`participation_id` = p.id and r.`assessor_id` = u.id and cp.`result_id` = r.id and r.`completion_date` is not null group by u.id, e.id</createView>
        <createView replaceIfExists="true" viewName="view_tutor_exam_leaderboard_more_feedback_requests">select count(*) as all_requests, sum(case when `cp`.`accepted` is null then 1 else 0 end) AS `not_answered_requests`, sum(case when `cp`.`accepted` is null then `e`.`max_score` else 0 end) as points, u.id as user_id, u.first_name, ex.id as exam_id, e.id as exercise_id from jhi_user u, user_groups g, course c, exam ex, exercise_group eg, exercise e, participation p, result r, complaint cp
            where cp.complaint_type = 'MORE_FEEDBACK' and g.`user_id` = u.id and g.`groups` = c.`teaching_assistant_group_name` and c.id = ex.course_id and ex.id = eg.exam_id and eg.id = e.exercise_group_id and p.`exercise_id` = e.id and e.`discriminator` in ('M', 'T', 'F', 'P') and r.`participation_id` = p.id and r.`assessor_id` = u.id and cp.`result_id` = r.id and r.`completion_date` is not null group by u.id, e.id</createView>
    </changeSet>
    <changeSet author="sebastianjagla" id="20200820154102">
        <!-- add existing assessments to tutor score -->
        <sql>
            update tutor_score
            inner join (select view.user_id, view.exercise_id, view.assessments, view.points as assessments_points
            from view_tutor_leaderboard_assessments view) as vt
            on tutor_score.tutor_id = vt.user_id and tutor_score.exercise_id = vt.exercise_id
            set tutor_score.assessments = vt.assessments, tutor_score.assessments_points = vt.assessments_points
        </sql>
        <sql>
            update tutor_score
            inner join (select view.user_id, view.exercise_id, view.assessments, view.points as assessments_points
            from view_tutor_exam_leaderboard_assessments view) as vt
            on tutor_score.tutor_id = vt.user_id and tutor_score.exercise_id = vt.exercise_id
            set tutor_score.assessments = vt.assessments, tutor_score.assessments_points = vt.assessments_points
        </sql>
        <!-- add existing complaint responses to table -->
        <sql>
            update tutor_score
            inner join (select view.user_id, view.exercise_id, view.complaint_responses, view.points as complaint_responses_points
            from view_tutor_leaderboard_complaint_responses view) as vt
            on tutor_score.tutor_id = vt.user_id and tutor_score.exercise_id = vt.exercise_id
            set tutor_score.complaint_responses = vt.complaint_responses, tutor_score.complaint_responses_points = vt.complaint_responses_points
        </sql>
        <sql>
            update tutor_score
            inner join (select view.user_id, view.exercise_id, view.complaint_responses, view.points as complaint_responses_points
            from view_tutor_exam_leaderboard_complaint_responses view) as vt
            on tutor_score.tutor_id = vt.user_id and tutor_score.exercise_id = vt.exercise_id
            set tutor_score.complaint_responses = vt.complaint_responses, tutor_score.complaint_responses_points = vt.complaint_responses_points
        </sql>
        <!-- add existing complaints to table -->
        <sql>
            update tutor_score
            inner join (select view.user_id, view.exercise_id, view.all_complaints, view.accepted_complaints, view.points as complaints_points
            from view_tutor_leaderboard_complaints view) as vt
            on tutor_score.tutor_id = vt.user_id and tutor_score.exercise_id = vt.exercise_id
            set tutor_score.all_complaints = vt.all_complaints, tutor_score.accepted_complaints = vt.accepted_complaints, tutor_score.complaints_points = vt.complaints_points
        </sql>
        <sql>
            update tutor_score
            inner join (select view.user_id, view.exercise_id, view.all_complaints, view.accepted_complaints, view.points as complaints_points
            from view_tutor_exam_leaderboard_complaints view) as vt
            on tutor_score.tutor_id = vt.user_id and tutor_score.exercise_id = vt.exercise_id
            set tutor_score.all_complaints = vt.all_complaints, tutor_score.accepted_complaints = vt.accepted_complaints, tutor_score.complaints_points = vt.complaints_points
        </sql>
        <!-- add existing more feedback requests to table -->
        <sql>
            update tutor_score
            inner join (select view.user_id, view.exercise_id, view.all_requests as all_feedback_requests, view.not_answered_requests as not_answered_feedback_requests, view.points as feedback_requests_points
            from view_tutor_leaderboard_more_feedback_requests view) as vt
            on tutor_score.tutor_id = vt.user_id and tutor_score.exercise_id = vt.exercise_id
            set tutor_score.all_feedback_requests = vt.all_feedback_requests, tutor_score.not_answered_feedback_requests = vt.not_answered_feedback_requests, tutor_score.feedback_requests_points = vt.feedback_requests_points
        </sql>
        <sql>
            update tutor_score
            inner join (select view.user_id, view.exercise_id, view.all_requests as all_feedback_requests, view.not_answered_requests as not_answered_feedback_requests, view.points as feedback_requests_points
            from view_tutor_exam_leaderboard_more_feedback_requests view) as vt
            on tutor_score.tutor_id = vt.user_id and tutor_score.exercise_id = vt.exercise_id
            set tutor_score.all_feedback_requests = vt.all_feedback_requests, tutor_score.not_answered_feedback_requests = vt.not_answered_feedback_requests, tutor_score.feedback_requests_points = vt.feedback_requests_points
        </sql>
        <!-- add existing answered feedback requests to table -->
        <sql>
            update tutor_score
            inner join (select view.user_id, view.exercise_id, view.answered_requests as answered_feedback_requests, view.points as answered_feedback_requests_points
            from view_tutor_leaderboard_answered_more_feedback_requests view) as vt
            on tutor_score.tutor_id = vt.user_id and tutor_score.exercise_id = vt.exercise_id
            set tutor_score.answered_feedback_requests = vt.answered_feedback_requests, tutor_score.answered_feedback_requests_points = vt.answered_feedback_requests_points
        </sql>
        <sql>
            update tutor_score
            inner join (select view.user_id, view.exercise_id, view.answered_requests as answered_feedback_requests, view.points as answered_feedback_requests_points
            from view_tutor_exam_leaderboard_answered_more_feedback_requests view) as vt
            on tutor_score.tutor_id = vt.user_id and tutor_score.exercise_id = vt.exercise_id
            set tutor_score.answered_feedback_requests = vt.answered_feedback_requests, tutor_score.answered_feedback_requests_points = vt.answered_feedback_requests_points
        </sql>
    </changeSet>
</databaseChangeLog>
