<?xml version="1.1" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext" xmlns:pro="http://www.liquibase.org/xml/ns/pro" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-3.9.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd">
    <changeSet author="sebastianjagla" id="20200811220510">
        <createView replaceIfExists="true" viewName="view_tutor_exam_leaderboard_answered_more_feedback_requests">select count(*) as answered_requests, sum(e.`max_score`) as points, u.id as user_id, u.first_name, ex.id as exam_id, e.id as exercise_id from jhi_user u, user_groups g, course c, exam ex, exercise_group eg, exercise e, participation p, result r, complaint cp
            where cp.complaint_type = 'MORE_FEEDBACK' and g.`user_id` = u.id and g.`groups` = c.`teaching_assistant_group_name` and c.id = ex.course_id and ex.id = eg.exam_id and eg.id = e.exercise_group_id and p.`exercise_id` = e.id and e.`discriminator` in ('M', 'T', 'F', 'P') and r.`participation_id` = p.id and r.`assessor_id` = u.id and cp.`result_id` = r.id and cp.`accepted` is null and r.`completion_date` is not null group by u.id, e.id</createView>
        <createView replaceIfExists="true" viewName="view_tutor_exam_leaderboard_assessments">select count(*) as assessments, sum(e.`max_score`) as points, u.id as user_id, u.first_name, ex.id as exam_id, e.id as exercise_id from jhi_user u, user_groups g, course c, exam ex, exercise_group eg, exercise e, participation p, result r
            where g.`user_id` = u.id and g.`groups` = c.`teaching_assistant_group_name` and c.id = ex.course_id and ex.id = eg.exam_id and eg.id = e.exercise_group_id and p.`exercise_id` = e.id and e.`discriminator` in ('M', 'T', 'F') and r.`participation_id` = p.id and r.`assessor_id` = u.id and r.`completion_date` is not null group by u.id, e.id</createView>
        <createView replaceIfExists="true" viewName="view_tutor_exam_leaderboard_complaint_responses">select count(*) as complaint_responses, sum(e.`max_score`) as points, u.id as user_id, u.first_name, ex.id as exam_id, e.id as exercise_id from jhi_user u, user_groups g, course c, exam ex, exercise_group eg, exercise e, participation p, result r, complaint cp, complaint_response cr
            where g.`user_id` = u.id and g.`groups` = c.`teaching_assistant_group_name` and c.id = ex.course_id and ex.id = eg.exam_id and eg.id = e.exercise_group_id and p.`exercise_id` = e.id and e.`discriminator` in ('M', 'T') and r.`participation_id` = p.id and cr.`reviewer_id` = u.id and cp.`result_id` = r.id and cp.id = cr.`complaint_id` and cp.`accepted` is not null and r.`completion_date` is not null group by u.id, e.id</createView>
        <createView replaceIfExists="true" viewName="view_tutor_exam_leaderboard_complaints">select count(*) as all_complaints, sum(case when `cp`.`accepted` = 1 then 1 else 0 end) AS `accepted_complaints`, sum(case when `cp`.`accepted` = 1 then `e`.`max_score` else 0 end) as points, u.id as user_id, u.first_name, ex.id as exam_id, e.id as exercise_id from jhi_user u, user_groups g, course c, exam ex, exercise_group eg, exercise e, participation p, result r, complaint cp
            where cp.complaint_type = 'COMPLAINT' and g.`user_id` = u.id and g.`groups` = c.`teaching_assistant_group_name` and c.id = ex.course_id and ex.id = eg.exam_id and eg.id = e.exercise_group_id and p.`exercise_id` = e.id and e.`discriminator` in ('M', 'T', 'F', 'P') and r.`participation_id` = p.id and r.`assessor_id` = u.id and cp.`result_id` = r.id and r.`completion_date` is not null group by u.id, e.id</createView>
        <createView replaceIfExists="true" viewName="view_tutor_exam_leaderboard_more_feedback_requests">select count(*) as all_requests, sum(case when `cp`.`accepted` is null then 1 else 0 end) AS `not_answered_requests`, sum(case when `cp`.`accepted` is null then `e`.`max_score` else 0 end) as points, u.id as user_id, u.first_name, ex.id as exam_id, e.id as exercise_id from jhi_user u, user_groups g, course c, exam ex, exercise_group eg, exercise e, participation p, result r, complaint cp
            where cp.complaint_type = 'MORE_FEEDBACK' and g.`user_id` = u.id and g.`groups` = c.`teaching_assistant_group_name` and c.id = ex.course_id and ex.id = eg.exam_id and eg.id = e.exercise_group_id and p.`exercise_id` = e.id and e.`discriminator` in ('M', 'T', 'F', 'P') and r.`participation_id` = p.id and r.`assessor_id` = u.id and cp.`result_id` = r.id and r.`completion_date` is not null group by u.id, e.id</createView>
    </changeSet>
</databaseChangeLog>
